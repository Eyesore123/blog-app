<?php
// Simple security check - you should change this token
$validToken = getenv('ADMIN_SETUP_TOKEN');
$providedToken = $_GET['token'] ?? '';

if (!$validToken || $providedToken !== $validToken) {
    echo "Unauthorized";
    exit(1);
}

echo "<h1>Direct Database Configuration</h1>";

// Get the DATABASE_URL
$databaseUrl = getenv('DATABASE_URL');

if (!$databaseUrl) {
    echo "<p>DATABASE_URL is not set!</p>";
    exit;
}

// Parse the DATABASE_URL
$dbParts = parse_url($databaseUrl);
$host = $dbParts['host'] ?? '';
$port = $dbParts['port'] ?? 5432;
$database = ltrim($dbParts['path'] ?? '', '/');
$username = $dbParts['user'] ?? '';
$password = $dbParts['pass'] ?? '';

// Create a direct database configuration file
$configPath = __DIR__ . '/../config/database.php';
$backupPath = $configPath . '.backup-' . date('Y-m-d-H-i-s');

// Backup the original file
if (file_exists($configPath)) {
    copy($configPath, $backupPath);
    echo "<p>Original database.php backed up to: $backupPath</p>";
}

// Create a new database.php file with hardcoded PostgreSQL configuration
$newConfig = <<<EOD
<?php

return [
    'default' => 'pgsql',
    'connections' => [
        'pgsql' => [
            'driver' => 'pgsql',
            'url' => env('DATABASE_URL'),
            'host' => '{$host}',
            'port' => {$port},
            'database' => '{$database}',
            'username' => '{$username}',
            'password' => '{$password}',
            'charset' => 'utf8',
            'prefix' => '',
            'prefix_indexes' => true,
            'search_path' => 'public',
            'sslmode' => 'prefer',
        ],
        'sqlite' => [
            'driver' => 'sqlite',
            'url' => env('DATABASE_URL'),
            'database' => env('DB_DATABASE', database_path('database.sqlite')),
            'prefix' => '',
            'foreign_key_constraints' => env('DB_FOREIGN_KEYS', true),
        ],
        'mysql' => [
            'driver' => 'mysql',
            'url' => env('DATABASE_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '3306'),
            'database' => env('DB_DATABASE', 'forge'),
            'username' => env('DB_USERNAME', 'forge'),
            'password' => env('DB_PASSWORD', ''),
            'unix_socket' => env('DB_SOCKET', ''),
            'charset' => 'utf8mb4',
            'collation' => 'utf8mb4_unicode_ci',
            'prefix' => '',
            'prefix_indexes' => true,
            'strict' => true,
            'engine' => null,
            'options' => extension_loaded('pdo_mysql') ? array_filter([
                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
            ]) : [],
        ],
    ],
    'migrations' => [
        'table' => 'migrations',
        'update_date_on_publish' => true,
    ],
    'redis' => [
        'client' => env('REDIS_CLIENT', 'phpredis'),
        'options' => [
            'cluster' => env('REDIS_CLUSTER', 'redis'),
            'prefix' => env('REDIS_PREFIX', 'laravel_database_'),
        ],
        'default' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'username' => env('REDIS_USERNAME'),
            'password' => env('REDIS_PASSWORD'),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_DB', '0'),
        ],
        'cache' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'username' => env('REDIS_USERNAME'),
            'password' => env('REDIS_PASSWORD'),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_CACHE_DB', '1'),
        ],
    ],
];
EOD;

// Write the new configuration file
if (file_put_contents($configPath, $newConfig)) {
    echo "<p>Database configuration updated with hardcoded PostgreSQL settings.</p>";
} else {
    echo "<p>Failed to update database configuration. Check permissions.</p>";
}

// Create a bootstrap file to force the database connection
$bootstrapPath = __DIR__ . '/../bootstrap/db_force.php';
$bootstrapContent = <<<EOD
<?php
// This file is automatically generated to force PostgreSQL connection

// Force PostgreSQL connection
\$app = app();
\$app->make('config')->set('database.default', 'pgsql');
\$app->make('config')->set('database.connections.pgsql.host', '{$host}');
\$app->make('config')->set('database.connections.pgsql.port', {$port});
\$app->make('config')->set('database.connections.pgsql.database', '{$database}');
\$app->make('config')->set('database.connections.pgsql.username', '{$username}');
\$app->make('config')->set('database.connections.pgsql.password', '{$password}');

// Reconnect to the database with the new configuration
\$app->make('db')->purge();
\$app->make('db')->reconnect();
EOD;

// Write the bootstrap file
if (file_put_contents($bootstrapPath, $bootstrapContent)) {
    echo "<p>Database force file created at: $bootstrapPath</p>";
} else {
    echo "<p>Failed to create database force file. Check permissions.</p>";
}

// Modify the bootstrap/app.php file to include our force file
$appPath = __DIR__ . '/../bootstrap/app.php';
$appContent = file_get_contents($appPath);
$appBackupPath = $appPath . '.backup-' . date('Y-m-d-H-i-s');

// Backup the original file
if (file_exists($appPath)) {
    copy($appPath, $appBackupPath);
    echo "<p>Original app.php backed up to: $appBackupPath</p>";
}

// Check if the force file is already included
if (strpos($appContent, 'db_force.php') === false) {
    // Find the position to insert our code
    $returnPos = strpos($appContent, 'return $app;');
    
    if ($returnPos !== false) {
        $newContent = substr($appContent, 0, $returnPos);
        $newContent .= <<<'EOD'
// Include database force file
if (file_exists(__DIR__ . '/db_force.php')) {
    require __DIR__ . '/db_force.php';
}

EOD;
        $newContent .= substr($appContent, $returnPos);
        
        // Write the modified app.php
        if (file_put_contents($appPath, $newContent)) {
            echo "<p>bootstrap/app.php modified to include database force file.</p>";
        } else {
            echo "<p>Failed to modify bootstrap/app.php. Check permissions.</p>";
        }
    } else {
        echo "<p>Could not find the return statement in bootstrap/app.php.</p>";
    }
} else {
    echo "<p>bootstrap/app.php already includes the database force file.</p>";
}

// Create a direct database connection test
echo "<h2>Testing Direct Database Connection</h2>";
echo "<pre>";
try {
    $dsn = "pgsql:host=$host;port=$port;dbname=$database;user=$username;password=$password";
    $pdo = new PDO($dsn);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    
    echo "Connection: Success\n";
    
    // Get the PostgreSQL version
    $stmt = $pdo->query('SELECT version()');
    $version = $stmt->fetchColumn();
    echo "PostgreSQL Version: $version\n\n";
    
    // List tables
    $stmt = $pdo->query("
        SELECT table_name 
        FROM information_schema.tables 
        WHERE table_schema = 'public'
        ORDER BY table_name
    ");
    
    echo "Tables:\n";
    $tables = $stmt->fetchAll(PDO::FETCH_COLUMN);
    
    if (empty($tables)) {
        echo "No tables found.\n";
    } else {
        foreach ($tables as $table) {
            echo "- $table\n";
        }
    }
    
} catch (PDOException $e) {
    echo "Connection Error: " . $e->getMessage() . "\n";
}
echo "</pre>";

echo "<p>Done. <a href='/'>Go to homepage</a></p>";
